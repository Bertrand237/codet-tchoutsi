rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check user role
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    // Helper function to check if user has any of the roles
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserData().role in roles;
    }
    
    // Helper function to check if user is admin or président
    function isAdminOrPresident() {
      return hasAnyRole(['admin', 'président']);
    }
    
    // Helper function to check if user is commissaire or admin
    function canValidatePayments() {
      return hasAnyRole(['admin', 'commissaire']);
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone can read their own user document
      allow read: if isAuthenticated();
      
      // Users can create their own document during signup
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can update their own profile (except role)
      allow update: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      request.resource.data.role == resource.data.role;
      
      // Admin and président can change roles
      allow update: if isAdminOrPresident();
      
      // Only admin can delete users
      allow delete: if hasRole('admin');
    }
    
    // Payments collection
    match /payments/{paymentId} {
      // Members can read their own payments, others with permission can read all
      allow read: if isAuthenticated() && (
        resource.data.membreId == request.auth.uid ||
        hasAnyRole(['admin', 'président', 'trésorier', 'commissaire'])
      );
      
      // Members can create their own payments
      allow create: if isAuthenticated() &&
                      hasAnyRole(['membre', 'admin', 'président', 'trésorier', 'commissaire']) &&
                      request.resource.data.membreId == request.auth.uid &&
                      request.resource.data.statut == 'en_attente';
      
      // Members can update their own pending payments
      allow update: if isAuthenticated() &&
                      resource.data.membreId == request.auth.uid &&
                      resource.data.statut == 'en_attente' &&
                      request.resource.data.statut == 'en_attente';
      
      // Commissaires and admins can validate/reject payments
      allow update: if canValidatePayments() &&
                      request.resource.data.statut in ['validé', 'rejeté'] &&
                      request.resource.data.validePar == request.auth.uid;
      
      // Only admin can delete
      allow delete: if hasRole('admin');
    }
    
    // Families collection
    match /families/{familyId} {
      // Members can read their own family, others with permission can read all
      allow read: if isAuthenticated() && (
        resource.data.membreId == request.auth.uid ||
        hasAnyRole(['admin', 'président', 'trésorier', 'commissaire'])
      );
      
      // Members can create their own family
      allow create: if isAuthenticated() &&
                      hasAnyRole(['membre', 'admin', 'président', 'trésorier', 'commissaire']) &&
                      request.resource.data.membreId == request.auth.uid;
      
      // Members can update their own family
      allow update: if isAuthenticated() &&
                      resource.data.membreId == request.auth.uid;
      
      // Members can delete their own family, admins can delete any
      allow delete: if isAuthenticated() && (
        resource.data.membreId == request.auth.uid ||
        hasRole('admin')
      );
    }
    
    // Messages collection
    match /messages/{messageId} {
      // All authenticated members can read messages
      allow read: if isAuthenticated() &&
                     hasAnyRole(['membre', 'admin', 'président', 'trésorier', 'commissaire']);
      
      // All authenticated members can create messages
      allow create: if isAuthenticated() &&
                      hasAnyRole(['membre', 'admin', 'président', 'trésorier', 'commissaire']) &&
                      request.resource.data.senderId == request.auth.uid;
      
      // Users can update their own messages (for read receipts)
      allow update: if isAuthenticated() &&
                      resource.data.senderId == request.auth.uid;
      
      // Only admin can delete messages
      allow delete: if hasRole('admin');
    }
    
    // Blog collection
    match /blog/{postId} {
      // Everyone can read published posts
      allow read: if isAuthenticated() && (
        resource.data.published == true ||
        isAdminOrPresident()
      );
      
      // Only admin and président can create/update/delete blog posts
      allow create, update, delete: if isAdminOrPresident();
    }
    
    // Advertisements collection
    match /advertisements/{adId} {
      // Everyone can read active ads
      allow read: if isAuthenticated();
      
      // Only admin and président can manage ads
      allow create, update, delete: if isAdminOrPresident();
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Members can read all projects
      allow read: if isAuthenticated() &&
                     hasAnyRole(['membre', 'admin', 'président', 'trésorier', 'commissaire']);
      
      // Only admin and président can create projects
      allow create: if isAdminOrPresident();
      
      // Project owners, admin, and président can update
      allow update: if isAuthenticated() && (
        resource.data.responsableId == request.auth.uid ||
        isAdminOrPresident()
      );
      
      // Only admin can delete projects
      allow delete: if hasRole('admin');
    }
    
    // Budget transactions collection
    match /budget_transactions/{transactionId} {
      // Admin, président, and trésorier can read all transactions
      allow read: if isAuthenticated() &&
                     hasAnyRole(['admin', 'président', 'trésorier']);
      
      // Only admin, président, and trésorier can create transactions
      allow create: if isAuthenticated() &&
                      hasAnyRole(['admin', 'président', 'trésorier']) &&
                      request.resource.data.creePar == request.auth.uid;
      
      // Only admin can update or delete transactions
      allow update, delete: if hasRole('admin');
    }
    
    // Events collection (calendar)
    match /events/{eventId} {
      // All members can read events
      allow read: if isAuthenticated() &&
                     hasAnyRole(['membre', 'admin', 'président', 'trésorier', 'commissaire']);
      
      // Only admin and président can create events
      allow create: if isAdminOrPresident() &&
                      request.resource.data.organisateurId == request.auth.uid;
      
      // Only admin and président can update/delete events
      allow update, delete: if isAdminOrPresident();
    }
    
    // Polls collection (voting)
    match /polls/{pollId} {
      // All members can read polls
      allow read: if isAuthenticated() &&
                     hasAnyRole(['membre', 'admin', 'président', 'trésorier', 'commissaire']);
      
      // Only admin and président can create polls
      allow create: if isAdminOrPresident() &&
                      request.resource.data.creePar == request.auth.uid;
      
      // Members can update to vote - with security checks
      // - Must be active poll
      // - User must not have already voted
      // - Can only add their ID to votants (using arrayUnion)
      // - Core fields cannot be changed
      allow update: if isAuthenticated() &&
                      hasAnyRole(['membre', 'admin', 'président', 'trésorier', 'commissaire']) &&
                      resource.data.actif == true &&
                      !(request.auth.uid in resource.data.votants) &&
                      request.resource.data.question == resource.data.question &&
                      request.resource.data.creePar == resource.data.creePar &&
                      request.resource.data.actif == resource.data.actif;
      
      // Admin and président can update poll status (activate/deactivate)
      allow update: if isAdminOrPresident();
      
      // Only admin can delete polls
      allow delete: if hasRole('admin');
    }
  }
}
